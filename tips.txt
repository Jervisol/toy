just for liuzhen to study

主要思想：

1.读取配置，将测试流程加载成测试图。
2.根据测试图开启异步任务组。
3.根据测试图结构控制异步任务的开启时间点。
4.通过表达式加载入参，判断测试结果是否正确。
5.根据测试图结构生成测试日志文件。



重点模块：

1.表达式解析器ExpressionHelper，用于解析字符串表达式，如：$DEF_1{$DEF_2{abs}},表示加abs先做DEF_2的自定义处理后，再进行DEF_1的处理
    <1>支持多表达式的任意叠加，如：$DEF_1{$DEF_2{abs}bbb$DEF_3{ccc}}。
    <2>支持表达式自定义处理，调用ExpressionHelper.addFilter方法自定义加载表达式。

2.图论解析器Graph，用于数据结构为图的数据的一系列操作，该解析器使用空间换时间的方式，使得所有图象相关的操作的时间复杂度最大为n。
    <1>包含图论中的点，边，权重等思想。
    <2>暂时只支持有向简单图，如需更复杂的图，请自行重载对应接口。
    <3>NodeHandler点相关操作，EdgeHandler边相关操作，PlusHandler额外的操作，如需最短路径等算法操作，可根据图论快速实现，图对象中包含图论中描述图的所有数据。

3.深度拷贝工具BeanCopyUtil，默认对应非jdk的类进行反射深度拷贝。
    <1>如有{@link CopySkip}注解，则跳过该属性的copy。
    <2>如有{@link CopyReference}注解，则直接copy该属性的引用，即不执行深度copy。
    <3>如有{@link CopyFiled}注解，根据注解的value数组从copy的最外层对象寻找和value数组中名字相同的数据进行copy。
    <4>如该注解有自定义{@link CopyCustom}，可以更加该接口内自定义方法进行copy。
    <5>如copy时遇到Set，Map，List，默认使用HashSet,HashMap,ArrayList，进行深度copy。
    <6>如需使用实现了Set的其他Set，请使用{@link CopySet},并提供无参默认构造器。
    <7>如需使用实现了List的其他List，请使用{@link CopyList},并提供无参默认构造器。
    <8>如需使用实现了Map的其他Map，请使用{@link CopyMap},并提供无参默认构造器。
    <9>在整个深度copy过程中，如被copy对应中的两个属性指向同一个对象，在深度copy后的对象也会使对象属性指向同一对象，并且是包括属性不在同一层里（如对象有个属性指向a，在a同层有个Map，Map的value里也有个指向a，深度copy后也将保持该关系）。
    <10>以上所有注解均含有key的值，如key为空白，默认在所有情况下使用该注解，如key包含"test"，则只有在调用包含String key的重载方法，并设置为test的才会使用该注解。
    <11>提供对应List和Set的深度copy。

4.异步任务MultiProcessor，开启异步任务后，调用add方法加入异步任务，MultiProcessor将自行从队列中获取任务并回调IMultiProcessor进行任务处理。
    <1>创建异步任务时，需要任务队列的最大值，同时处理的线程数，处理的回调接口。
    <2>处理线程在一批异步任务内不会重复创建，减少不必要的开销。
    <3>在任务队列为空时，处理线程将休眠，以免占用资源。
    <4>提供await方法使主线程等待所有异步任务结束。
    <5>提供停止所有任务的方法，休眠的线程将重新被唤醒并结束线程，正在处理的线程将处理完成后结束线程，以免内存溢出。

